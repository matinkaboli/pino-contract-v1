/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Curve2,
  Curve2Interface,
} from "../../../contracts/Curve2.sol/Curve2";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_pool",
        type: "address",
      },
      {
        internalType: "address[3]",
        name: "_tokens",
        type: "address[3]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256[3]",
        name: "_amounts",
        type: "uint256[3]",
      },
      {
        internalType: "uint256",
        name: "_minMintAmount",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "i",
        type: "uint8",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "i",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "j",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "dx",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minDy",
        type: "uint256",
      },
    ],
    name: "exchange",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "minAmounts",
        type: "uint256[]",
      },
    ],
    name: "removeLiquidity",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610ed0380380610ed08339818101604052608081101561003357600080fd5b5080519060200160006100446100b5565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606083901b166080526100ad60018260036100b9565b505050610126565b3390565b8260038101928215610101579160200282015b8281111561010157825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906100cc565b5061010d929150610111565b5090565b5b8082111561010d5760008155600101610112565b60805160601c610d79610157600039806103e6528061058c52806106765280610a2d5280610c995250610d796000f3fe60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461018d578063a4bf0446146101cb578063f2fde38b1461021f578063fca0025d1461025f5761007b565b806304c76af01461008057806323ff31a2146100975780633df0212414610141578063715018a614610178575b600080fd5b34801561008c57600080fd5b5061009561028c565b005b610095600480360360408110156100ad57600080fd5b813591908101906040810160208201356401000000008111156100cf57600080fd5b8201836020820111156100e157600080fd5b8035906020019184602083028401116401000000008311171561010357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610391945050505050565b6100956004803603608081101561015757600080fd5b508035600f90810b91602081013590910b906040810135906060013561047f565b34801561018457600080fd5b506100956107a9565b34801561019957600080fd5b506101a26108c0565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610095600480360360808110156101e157600080fd5b810190808060600190600380602002604051908101604052809291908260036020028082843760009201919091525091945050903591506108dc9050565b34801561022b57600080fd5b506100956004803603602081101561024257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610aa8565b34801561026b57600080fd5b506100956004803603602081101561028257600080fd5b503560ff16610c49565b610294610d42565b73ffffffffffffffffffffffffffffffffffffffff166102b26108c0565b73ffffffffffffffffffffffffffffffffffffffff161461033457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000471161034157600080fd5b6103496108c0565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561038e573d6000803e3d6000fd5b50565b604080517fd40ddb8c000000000000000000000000000000000000000000000000000000008152600481018481526024820192835283516044830152835173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169363d40ddb8c9387938793909291606401906020808601910280838360005b8381101561043d578181015183820152602001610425565b505050509050019350505050600060405180830381600087803b15801561046357600080fd5b505af1158015610477573d6000803e3d6000fd5b505050505050565b600184600f0b6003811061048f57fe5b0154604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101859052905173ffffffffffffffffffffffffffffffffffffffff909216916323b872dd916064808201926020929091908290030181600087803b15801561050e57600080fd5b505af1158015610522573d6000803e3d6000fd5b505050506040513d602081101561053857600080fd5b5060019050600f85900b6003811061054c57fe5b0154604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690529151919092169163095ea7b39160448083019260209291908290030181600087803b1580156105e757600080fd5b505af11580156105fb573d6000803e3d6000fd5b505050506040513d602081101561061157600080fd5b5050604080517f3df02124000000000000000000000000000000000000000000000000000000008152600f86810b600483015285900b60248201526044810184905260648101839052905160009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633df021249160848082019260209290919082900301818787803b1580156106be57600080fd5b505af11580156106d2573d6000803e3d6000fd5b505050506040513d60208110156106e857600080fd5b505190506001600f85900b600381106106fd57fe5b0154604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101849052905173ffffffffffffffffffffffffffffffffffffffff9092169163a9059cbb916044808201926020929091908290030181600087803b15801561077657600080fd5b505af115801561078a573d6000803e3d6000fd5b505050506040513d60208110156107a057600080fd5b50505050505050565b6107b1610d42565b73ffffffffffffffffffffffffffffffffffffffff166107cf6108c0565b73ffffffffffffffffffffffffffffffffffffffff161461085157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60005b60038160ff1610156109ef576000838260ff16600381106108fc57fe5b602002015111156109e75760018160ff166003811061091757fe5b015473ffffffffffffffffffffffffffffffffffffffff166323b872dd33308660ff86166003811061094557fe5b60200201516040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156109ba57600080fd5b505af11580156109ce573d6000803e3d6000fd5b505050506040513d60208110156109e457600080fd5b50505b6001016108df565b506040517f4515cef300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634515cef390849084906004018083606080838360005b83811015610a7d578181015183820152602001610a65565b5050505090500182815260200192505050600060405180830381600087803b15801561046357600080fd5b610ab0610d42565b73ffffffffffffffffffffffffffffffffffffffff16610ace6108c0565b73ffffffffffffffffffffffffffffffffffffffff1614610b5057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610d476026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60018160ff1660038110610c5957fe5b0154604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248301529151919092169163095ea7b39160448083019260209291908290030181600087803b158015610d1357600080fd5b505af1158015610d27573d6000803e3d6000fd5b505050506040513d6020811015610d3d57600080fd5b505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a164736f6c6343000706000a";

type Curve2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Curve2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Curve2__factory extends ContractFactory {
  constructor(...args: Curve2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _pool: PromiseOrValue<string>,
    _tokens: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Curve2> {
    return super.deploy(_pool, _tokens, overrides || {}) as Promise<Curve2>;
  }
  override getDeployTransaction(
    _pool: PromiseOrValue<string>,
    _tokens: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_pool, _tokens, overrides || {});
  }
  override attach(address: string): Curve2 {
    return super.attach(address) as Curve2;
  }
  override connect(signer: Signer): Curve2__factory {
    return super.connect(signer) as Curve2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Curve2Interface {
    return new utils.Interface(_abi) as Curve2Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Curve2 {
    return new Contract(address, _abi, signerOrProvider) as Curve2;
  }
}
